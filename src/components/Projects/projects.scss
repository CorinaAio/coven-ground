// @function strip-units($number) {
//   @return $number / ($number * 0 + 1);
// }
//
// @mixin clearfix {
//   &::after {
//     content: "";
//     display: block;
//     clear: both;
//   }
// }
//
// //*
// // Create an evenly spaced grid of hexagons
// //
// // @param number $columns The number of columns in "long" rows
// // @param number $gutter [default: 0] The gutter between columns
// // @param string $weight [default: odd] Which row should recieve the visual weight
// //  Visual weight is defined by the "long" rows, the row with more elements, or
// //  for the single column gird, the visual weight is placed on the elements aligned left.
// //
// @mixin hex-grid($columns, $gutter: 0, $weight: odd) {
//   float: left;
//
//   // Multicolumn layout
//   @if $columns > 1 {
//     // The gutter count is one less than number of columns
//     $gutter-count: $columns - 1;
//
//     // The width of each hexagon is:
//     //   100 (The total width of the container)
//     // - The gutter width * $gutter-count
//     // รท The number of columns
//     // รท 100 (for percentage)
//     $width: percentage(
//       (100 - (strip-units($gutter) * $gutter-count)) / $columns / 100
//     );
//     width: $width;
//
//     // The gutter
//     margin-right: $gutter;
//
//     // When constructing the grid, the last column in even rows (n) is significant
//     // That column defines the point at which the grid pattern repeats
//     $n: ($columns * 2) - 1;
//
//     // There are short rows and there are long rows
//     // The first and last column is short rows must be pushed away from the edges
//     $push: ($width + $gutter)/2;
//
//     // First column in short rows
//     $first-short: 1;
//     @if $weight == odd {
//       $first-short: $columns + 1;
//     }
//     &:nth-child(#{$n}n + #{$first-short}) {
//       margin-left: $push;
//     }
//
//     // Last column in short rows
//     $last-short: $columns - 1;
//     @if $weight == odd {
//       $last-short: $n;
//     }
//     &:nth-child(#{$n}n + #{$last-short}) {
//       margin-right: $push;
//     }
//
//     // The last column in long rows needs no gutter
//     $last-long: $n;
//     @if $weight == odd {
//       $last-long: $columns;
//     }
//     &:nth-child(#{$n}n + #{$last-long}) {
//       margin-right: 0;
//     }
//
//     // To remove excess space between rows, the rows must be "pulled" together
//     // This should only occur on even rows, as the first row should define the
//     // initial placement of the grid
//     // sqrt(3)/6 == 0.288675135
//     $pull: ($width * -0.288675135) + $gutter;
//
//     // Every element in even rows
//     $first-even: $columns;
//     @if $weight == odd {
//       $first-even: $columns + 1;
//     }
//     $all-even: join((), (), comma);
//     @for $i from $first-even through $n {
//       $all-even: append($all-even, unquote("&:nth-child(#{$n}n+#{$i})"));
//     }
//     #{$all-even} {
//       margin-top: $pull;
//       margin-bottom: $pull;
//     }
//   }
//   // Single column layout
//   @else if $columns == 1 {
//     // Given the nature of hexagons, 2/3 is the default width
//     $width: percentage(2/3) - ($gutter/2);
//     width: $width;
//
//     // Each column must be pushed into place
//     // The visual weight is placed on the left column
//     $even-push: right;
//     $odd-push: left;
//     @if $weight == odd {
//       $even-push: left;
//       $odd-push: right;
//     }
//     $push: 100% - $width;
//
//     // To remove excess space between rows, the rows must be "pulled" together
//     // This should only occur on even rows, as the first row should define the
//     // initial placement of the grid
//     // sqrt(3)/6 == 0.288675135
//     $pull: ($width * -0.288675135) + $gutter;
//     &:nth-child(even) {
//       margin-#{$even-push}: $push;
//
//       margin-top: $pull;
//       margin-bottom: $pull;
//     }
//
//     &:nth-child(odd) {
//       margin-#{$odd-push}: $push;
//     }
//   }
//
//   // Ensure the last row maintains it position
//   &:last-child {
//     margin-bottom: 0;
//   }
// }
//
// .hex {
//   background: #ff0;
//   position: relative;
//   overflow: hidden;
//   visibility: hidden;
//
//   &:before {
//     content: "";
//     position: absolute;
//     visibility: visible;
//     top: 0;
//     bottom: 0;
//     right: 0;
//     left: 0;
//
//     transform: rotate(-30deg) skewX(30deg) scale(1.155, 0.866);
//     background: inherit;
//   }
//
//   &:after {
//     content: "";
//     display: block;
//     padding-top: 115.4734411%;
//   }
//
//   & > * {
//     visibility: visible;
//   }
//
//   // GRID
//
//   @media (max-width: 499px) {
//     @include hex-grid(1, 2%);
//   }
//
//   @media (min-width: 500px) and (max-width: 719px) {
//     @include hex-grid(2, 2%, even);
//   }
//
//   @media (min-width: 720px) and (max-width: 879px) {
//     @include hex-grid(3, 2%, even);
//   }
//
//   @media (min-width: 880px) and (max-width: 1099px) {
//     @include hex-grid(4, 2%, even);
//   }
//
//   @media (min-width: 1100px) {
//     @include hex-grid(5, 2%, even);
//   }
//
//   & > div {
//     text-align: center;
//     position: absolute;
//     top: 50%;
//     left: 0;
//     right: 0;
//     transform: translateY(-50%);
//   }
// }
//
// .projects {
//   @media (min-width: 720px) {
//     width: 70%;
//     margin: auto;
//   }
//
//   @include clearfix;
// }

//AICI

/* Hexagons */
#hexGrid {
  overflow: hidden;
  width: 90%;
  margin: 0 auto;
  padding: 0.866% 0;
  font-family: "Raleway", sans-serif;
  font-size: 15px;

  width: 85%;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}

#hexGrid:after {
  content: "";
  display: block;
  clear: both;
}

.hex {
  position: relative;
  list-style-type: none;
  float: left;
  overflow: hidden;
  visibility: hidden;
  outline: 1px solid transparent; /* fix for jagged edges in FF on hover transition */
  transform: rotate(-60deg) skewY(30deg) translatez(-1px);
}

.hex * {
  position: absolute;
  visibility: visible;
  outline: 1px solid transparent; /* fix for jagged edges in FF on hover transition */
}

.hexIn {
  display: block;
  width: 100%;
  height: 100%;
  text-align: center;
  color: #fff;
  overflow: hidden;
  transform: skewY(-30deg) rotate(60deg);
}

/*** HEX CONTENT **********************************************************************/

.hex img {
  left: -100%;
  right: -100%;
  width: auto;
  height: 100%;
  margin: 0 auto;
}

.hex h1,
.hex p {
  margin: 0;
  width: 102%;
  left: -1%; /* prevent line on the right where background doesn't cover image */
  padding: 5%;
  box-sizing: border-box;
  background-color: rgba(0, 128, 128, 0.8);
  font-weight: 300;
  transition: transform 0.2s ease-out, opacity 0.3s ease-out;
}

.hex h1 {
  bottom: 50%;
  padding-top: 50%;
  font-size: 1.5em;
  z-index: 1;
  transform: translateY(-100%) translatez(-1px);
}

.hex h1:after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 45%;
  width: 10%;
  text-align: center;
  border-bottom: 1px solid #fff;
}

.hex p {
  top: 50%;
  padding-bottom: 50%;
  transform: translateY(100%) translatez(-1px);
}

/*** HOVER EFFECT  **********************************************************************/

.hexIn:hover h1,
.hexIn:focus h1,
.hexIn:hover p,
.hexIn:focus p {
  transform: translateY(0%) translatez(-1px);
}

/*** SPACING AND SIZING *****************************************************************/

@media (min-width: 1201px) {
  /* <- 2-3  hexagons per row */
  .hex {
    width: 300px; /* = (100-2) / 3 */
    padding-bottom: 345px; /* =  width / sin(60) */
    margin: 5px;
  }

  .hex:nth-child(9n + 1),
  .hex:nth-child(9n + 2),
  .hex:nth-child(9n + 3),
  .hex:nth-child(9n + 4) {
    transform: translateX(25%) rotate(-60deg) skewY(30deg);
  }
  .hex:nth-child(9n + 5),
  .hex:nth-child(9n + 6),
  .hex:nth-child(9n + 7),
  .hex:nth-child(9n + 8),
  .hex:nth-child(9n + 9) {
    // margin-top: -8.564%;
    // margin-bottom: -8.564%;
  }
  .hex:nth-child(9n + 5) {
    margin-left: 75px;
  }

  .hex:nth-child(9n + 9) {
    margin-right: -75px;
  }
  .hex:nth-child(9n + 1) {
    margin-left: 100px;
  }
  .hex:nth-child(9n + 4) {
    margin-right: 100px;
  }
  .hex:nth-child(9n + 5),
  .hex:nth-child(9n + 10) {
    clear: left;
  }
  .hex:nth-child(9n + 5),
  .hex:nth-child(9n + 6),
  .hex:nth-child(9n + 7),
  .hex:nth-child(9n + 8),
  .hex:nth-child(9n + 9) {
    margin-top: -85px;
    margin-bottom: 85px;
  }
}

@media (max-width: 1200px) {
  /* <- 1-2  hexagons per row */
  .hex {
    width: 49.5%; /* = (100-1) / 2 */
    padding-bottom: 57.158%; /* =  width / sin(60) */
  }
  .hex:nth-child(3n + 1) {
    transform: translateX(50%) rotate(-60deg) skewY(30deg);
  }
  .hex:nth-child(3n + 2),
  .hex:nth-child(3n + 3) {
    margin-top: -13.423%;
    margin-bottom: -13.423%;
  }
  .hex:nth-child(3n + 1) {
    margin-left: 0.5%;
  }
  .hex:nth-child(3n + 3) {
    margin-left: 1%;
  }
  .hex:nth-child(3n + 2),
  .hex:nth-child(3n + 4) {
    clear: left;
  }
}

@media (max-width: 400px) {
  #hexGrid {
    font-size: 13px;
  }
}

/* End Hexagons */
/* fork on github button */
#fork {
  font-family: "Raleway", sans-serif;
  position: fixed;
  top: 0;
  left: 0;
  color: #000;
  text-decoration: none;
  border: 1px solid #000;
  padding: 0.5em 0.7em;
  margin: 1%;
  transition: color 0.5s;
  overflow: hidden;
}
#fork:before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 130%;
  height: 100%;
  background: #000;
  z-index: -1;
  transform-origin: 0 0;
  transform: translateX(-100%) skewX(-45deg);
  transition: transform 0.5s;
}
#fork:hover {
  color: #fff;
}
#fork:hover:before {
  transform: translateX(0) skewX(-45deg);
}
